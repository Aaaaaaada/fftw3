* audit the implementation of RNK_MINFTY

* dft/buffered.c is still wrong, because there is no sharing of
  buffers.  Maybe should malloc() the buffer in apply().

* define a naming scheme for solvers.  Use it for
  wisdom.  The idea is that wisdom is a map problem -> solver.
  Given problem, look up solver in wisdom, use solver to compute
  plan.

* adapt verify() to vecsz.rnk > 0 .

* real transforms

* generic-radix cooley-tukey

* Rader should share twiddle arrays between plans.

* I can't believe that there isn't a closed form for the omega
  array in Rader.

* Too much code duplication between rader/apply and rader/apply_dit.

* simd

* threads/mpi

* DCT/DST ?  Idea: only implement the small cases as codelets,
  and reduce the rest to DFT via some known formula.  Multidimensional
  case is easy.  E.g., a fast 8x8 or 16x16 is still quite useful even
  if we cannot handle the general case efficiently.

* user interface

* merge genfft-k7 generator with the main genfft branch.
  genfft-k7 was written by Stefan Kral based on the fftw-2.1 genfft.

* buffered solver produces wrong strides for rank0 interleaved
  solvers.  In buffered, pointers obey I = R + 1.  When forward
  transform, the interleaved copy is applicable.  However, when
  backward transform, the interleaved copy is not applicable
  because R = I + 1 in input/output arrays.  Either fix the
  buffered solver or handle the special case in rank0.c
